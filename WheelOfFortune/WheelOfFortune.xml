<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WheelOfFortune</name>
    </assembly>
    <members>
        <member name="T:WheelOfFortune.Action">
            <summary>
            An abstract class that defines the basic properties of an action along with the functionality required to perform the action
            
            </summary>
        </member>
        <member name="T:WheelOfFortune.Action.ActionType">
            <summary>
            Enumration for the different action types performed by the player
            solving the puzzle,guessing a letter and spin the whels
            </summary>
        </member>
        <member name="P:WheelOfFortune.Action.actionType">
            <summary>
            A property that carries the type of the action
            </summary>
        </member>
        <member name="M:WheelOfFortune.Action.Execute(WheelOfFortune.Puzzle)">
            <summary>
            An abstract method to be overriden by the inheriting children so each class can include its version of implemnataion according to its type
            <param name="currentPuzzle">parameter holds the current puzzle instace</param>
            <returns>bool to indicate whether the puzzle was solved by the action executed</returns>
            </summary>
        </member>
        <member name="T:WheelOfFortune.Game">
            <summary>
            A class that manages the game and holds all the information about the players,round and puzzle
            </summary>
        </member>
        <member name="P:WheelOfFortune.Game.Players">
            <summary>
            A Queue that hold the players playing the game
            </summary>
        </member>
        <member name="P:WheelOfFortune.Game.Rounds">
            <summary>
            A list of the rounds throughout the game
            </summary>
        </member>
        <member name="P:WheelOfFortune.Game.CurrentPlayer">
            <summary>
            A reference for the current player
            </summary>
        </member>
        <member name="P:WheelOfFortune.Game.CurrentPuzzle">
            <summary>
            The value of the current puzzle to be solved
            </summary>
        </member>
        <member name="M:WheelOfFortune.Game.StartGame">
            <summary>
            A method that initialies the Game properties and start the turn
            </summary>
        </member>
        <member name="M:WheelOfFortune.Game.AddPlayer">
            <summary>
            A method that initializes Player and its properties
            </summary>
        </member>
        <member name="M:WheelOfFortune.Game.StartRound">
            <summary>
            A method that starts a Round
            </summary>
        </member>
        <member name="M:WheelOfFortune.Game.StartTurn">
            <summary>
            A method that starts a Turn
            </summary>
        </member>
        <member name="M:WheelOfFortune.Game.EndRound">
            <summary>
            A method that ends a Round
            </summary>
        </member>
        <member name="M:WheelOfFortune.Game.EndGame">
            <summary>
            A method that ends the whole Game
            </summary>
        </member>
        <member name="T:WheelOfFortune.GuessLetterAction">
            <summary>
             A Class for the Guess Letter Action Type
            </summary>
        </member>
        <member name="P:WheelOfFortune.GuessLetterAction.LetterGuess">
            <summary>
            A property for the Letter Guess
            </summary>
        </member>
        <member name="M:WheelOfFortune.GuessLetterAction.Execute(WheelOfFortune.Puzzle)">
            <summary>
            The Execute Action Implementation overriding the abstract method to provide the specific implemenation for the GuessLetterAction type
            This function will include the checking the guessed letter and updating the current puzzle if the guessed letter is correct
            <param name="currentPuzzle">parameter holds the current puzzle instace</param>
            <returns>bool to indicate that the puzzle not solved yet</returns>
            </summary>
        </member>
        <member name="T:WheelOfFortune.Player">
            <summary>
            A class that holds the Player's Details
            </summary>
        </member>
        <member name="P:WheelOfFortune.Player.Name">
            <summary>
            A property holding a player name
            </summary>
        </member>
        <member name="P:WheelOfFortune.Player.RoundMoney">
            <summary>
            A property to keep track of the Round Money for the Player
            </summary>
        </member>
        <member name="P:WheelOfFortune.Player.WalletMoney">
            <summary>
            A propertythat holds the Player's Wallet Money
            </summary>
        </member>
        <member name="P:WheelOfFortune.Player.CurrentAction">
            <summary>
            A Property of type Action holding the Current Action selected by the Player
            </summary>
        </member>
        <member name="M:WheelOfFortune.Player.PerformAction(WheelOfFortune.Action.ActionType,WheelOfFortune.Puzzle)">
            <summary>
            A method to perform a specific action  on a passed puzzle (solve the puzzle-guess a letter-spin the wheel)
            <param name="actionType"></param>
            <param name="currentPuzzle"></param>
            <returns>bool to indicate whether the player's action successfully solved the puzzle or not </returns>
            </summary>
        </member>
        <member name="T:WheelOfFortune.Program">
            <summary>
            The main class of the Wheel Of Fortune Application
            </summary>
        </member>
        <member name="M:WheelOfFortune.Program.Main(System.String[])">
            <summary>
            The main entry point of the Wheel Of Fortune Application that starts the Game
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:WheelOfFortune.Puzzle">
            <summary>
            A class that holds all the information about the Puzzle
            </summary>
        </member>
        <member name="P:WheelOfFortune.Puzzle.PuzzleAnswer">
            <summary>
            A property that holds the puzzle answer
            </summary>
        </member>
        <member name="P:WheelOfFortune.Puzzle.PuzzleSoFar">
            <summary>
            A property that holds the current puzzle solution so far
            </summary>
        </member>
        <member name="M:WheelOfFortune.Puzzle.IsPuzzleSolved(System.String)">
            <summary>
            A method to check whether the passed guessed word <paramref name="phrase"/> matches the puzzle or no
            </summary>
            <param name="phrase">passed guessed word</param>
            <returns>puzzle solved bool</returns>
        </member>
        <member name="M:WheelOfFortune.Puzzle.IsLetterInPuzzle(System.Char)">
            <summary>
            A method to check whether a letter <paramref name="letter"/> exists in the Puzzle 
            </summary>
            <param name="letter">passed guessed letter</param>
            <returns>letter in puzzle bool</returns>
        </member>
        <member name="M:WheelOfFortune.Puzzle.UpdateCurrentPuzzle(System.Char)">
            <summary>
            A method to update the current puzzle whena right letter <paramref name="letter"/> suggestion is passed
            </summary>
            <param name="letter">existing passed letter</param>
        </member>
        <member name="T:WheelOfFortune.Round">
            <summary>
            A class that holds the round details
            </summary>
        </member>
        <member name="P:WheelOfFortune.Round.puzzle">
            <summary>
            The Round Puzzle
            </summary>
        </member>
        <member name="P:WheelOfFortune.Round.Winner">
            <summary>
            The Round Winner
            </summary>
        </member>
        <member name="T:WheelOfFortune.SolvePuzzleAction">
            <summary>
            A Class for the Solve Puzzle Action Type
            </summary>
        </member>
        <member name="P:WheelOfFortune.SolvePuzzleAction.PuzzleGuess">
            <summary>
            A property for the Puzzle Guess
            </summary>
        </member>
        <member name="M:WheelOfFortune.SolvePuzzleAction.Execute(WheelOfFortune.Puzzle)">
            <summary>
            The Execute Action Implementation overriding the abstract method to provide the specific implemenation for the SolveActionPuzzle type
            This function will include checking whether the puzzle is solved or not
            if puzzle solved it will invoke the win message ,if not a fail message will be invoked 
            <param name="currentPuzzle">parameter holds the current puzzle instace</param>
            <returns>bool to indicate whether the puzzle was solved or not yet by that action</returns>
            </summary>
        </member>
    </members>
</doc>
